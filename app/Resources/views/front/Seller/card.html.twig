{% extends 'front/Layout/layout.html.twig' %}

{% block mainClass %}no-padding-top{% endblock %}

{% set isUserProPageProfil = (user.isPro) %}
{% set isUserPersonalPageProfil = (user.isPersonal) %}

{% block title %}
    {% if userIsMe %}
        {{ 'user.title.pro.mine'|trans }}
    {% else %}
        {{ 'user.title.pro.other'|trans({'%username%':user.fullName}) }}
    {% endif %}
{% endblock %}

{% block meta_description %}{{ user.presentationTitle is not null ? user.presentationTitle : 'user.presentation.title.pro'|trans }}{% endblock %}

{% set seo_img_url = user.avatar|avatar('user_thumbnail', user.fullName) %}

{% set breadcrumbs = [
    {
        'name': block('title'),
        'href': app.request.requestUri
    }
] %}

{% set presentation_block %}{% spaceless %}
    {% if user.description is not empty or userIsMe %}
        <h2>{{ user.presentationTitle is not null ? user.presentationTitle : 'user.presentation.title.pro'|trans }}</h2>
        {% if user.description %}
            <p class="text-justify no-margin">{{ user.description|nl2br }}</p>
        {% elseif userIsMe %}
            <p class="text-justify no-margin">{{ 'user.presentation.empty'|trans }}</p>
        {% endif %}
        {% if userIsMe %}
            <a href="{{ path('front_edit_user_info') }}" class="text-underline">{{ 'user.presentation.edit'|trans }}</a>
        {% endif %}
    {% endif %}
{% endspaceless %}{% endset %}

{% set affinity_block %}{% spaceless %}
    {% if userIsMe %}
        <h2>{{ "user.affinity.section.title"|trans }}</h2>
        {% if user.affinityAnswer is null %}
            <p>{{ 'user.affinity.section.explanation.pro'|trans({
                    '%affinity_form_url%': path('front_affinity_pro_form')
                })|raw }}</p>
        {% else %}
            <p>{{ 'user.affinity.section.edit.pro'|trans({
                    '%affinity_form_url%': path('front_affinity_pro_form')
                })|raw }}</p>
        {% endif %}
    {% elseif user.affinityAnswer is not null and (app.user is null or app.user.isPersonal) %}
        {% set userAffinity = user.getAffinityDegreesWith(app.user) %}
        <h2>{{ "user.affinity.section.your_affinities"|trans }}</h2>
        <canvas class="js-radar-chart {{ userAffinity is null ? 'radar-chart-empty' }}"
                data-dataset="{{ userAffinity is not null ? userAffinity.radarChartData|json_encode : emptyRadarChartData()|json_encode }}"></canvas>
        {% if userAffinity is null %}
            <p>{{ is_granted('IS_AUTHENTICATED_REMEMBERED') ? 'user.affinity.degree.explanation.personal.logged'|trans : 'user.affinity.degree.explanation.personal.unlogged'|trans }}</p>
            <p><a href="{{ path('front_affinity_personal_form') }}"
                  class="button">{{ 'user.affinity.degree.calltoaction.fill_form'|trans }}</a></p>
        {% endif %}
    {% endif %}
{% endspaceless %}{% endset %}

{% set seller_garage_block %}{% spaceless %}
    {% if user.hasGarage or userIsMe %}
        {% if user.hasGarage or userIsMe %}
            {% include 'front/User/includes/brand_list.html.twig' %}
        {% else %}
            <p>{{ 'user.garage.empty'|trans }}</p>
        {% endif %}

        {% if addGarageForm is not null %}
            <h3>{{ 'user.garage.join'|trans }}</h3>
            {{ form_start(addGarageForm, {'attr' : { 'data-abide' : '', 'novalidate': 'novalidate'} }) }}

            {% include 'front/Layout/includes/forms/input.html.twig' with {
                label: 'garage.form.field.googleSearch.label'|trans,
                label_class: 'hide',
                name: 'google_place',
                placeholder: 'garage.form.field.googleSearch.placeholder'|trans,
                attributes:{
                    'data-google_api_client_key' : google_api_client_key,
                    'data-locale' : app.request.locale|slice(0, 2)
                }
            } %}
            {{ form_widget(addGarageForm.googlePlaceId) }}
            {{ form_widget(addGarageForm.googleRating) }}
            {{ form_widget(addGarageForm.latitude) }}
            {{ form_widget(addGarageForm.longitude) }}
            {{ form_widget(addGarageForm.name) }}
            {{ form_widget(addGarageForm.openingHours) }}
            {{ form_widget(addGarageForm.address) }}
            {{ form_widget(addGarageForm.postalCode) }}
            {{ form_widget(addGarageForm.cityName) }}
            {{ form_widget(addGarageForm.phone) }}

            <button type="submit" class="button full-width input-margin">{{ 'global.button.validate'|trans }}</button>
            {{ form_end(addGarageForm) }}
        {% endif %}
        {% if userIsMe %}
            <a href="{{ path('front_garage_create') }}" class="text-underline">{{ 'user.garage.add'|trans }}</a>
        {% endif %}
    {% endif %}
{% endspaceless %}{% endset %}

{% set vehicle_block %}{% spaceless %}
    {% if vehicles.totalHits > 0 %}
        <div class="column small-12 garage-container">
            <div class="column">
                <div class="row">
                    <div class="column small-12 medium-auto"><h2>{{ 'user.vehicles.title'|trans }}</h2></div>
                </div>
            </div>
            {% include 'front/Garages/Detail/includes/tabs_vehicles.html.twig' with {
                'pagination_route': 'front_view_pro_user_info',
                'pagination_route_params': {'slug':user.slug},
                'displayNbOfResult' : false
            } %}
        </div>
    {% endif %}
{% endspaceless %}{% endset %}


{% block body %}
    {% include 'front/Layout/includes/breadcrumb.html.twig' %}
    {% include 'front/User/includes/profil_header.html.twig' %}

    <section class="row full-width">
        <div class="profil-body column block-grid small-12 small-up-1 large-up-2">
            {% if presentation_block is not empty or affinity_block is not empty %}
                <div class="column">
                    {{ presentation_block }}
                    {% if presentation_block is not empty and affinity_block is not empty %}
                        <div class="separator"></div>
                    {% endif %}
                    {{ affinity_block }}
                </div>
            {% endif %}

            {% if seller_garage_block is not empty %}
                <div class="column margin-bottom-2">
                    {{ seller_garage_block }}
                </div>
            {% endif %}
        </div>

        {% if vehicle_block is not empty %}
            {{ vehicle_block }}
        {% endif %}

        {% if userIsMe %}
            <div class="column block-grid small-12">
                <div class="{{ presentation_block is empty and user_project_block is empty and affinity_block is empty and user.vehicles|length ==  0?'no-padding':'separator' }} column section small-12">
                    <h2>{{ 'user.profile.delete.title'|trans }}</h2>
                    <p>{{ 'user.profile.delete.link.information'|trans }}<a href="{{ path('front_user_delete') }}"
                                                                            class="text-underline">{{ 'global.button.delete'|trans }}</a>
                    </p>
                </div>
            </div>
        {% endif %}
    </section>

    {% if not userIsMe %}
        {# On mobile device : button to send a message fixed at screen bottom #}
        <div class="vehicle-editing hide-for-large block-grid small-12">
            <span class="column small-collapse small-12">
                <a href="{{ path('front_conversation_create', {'id': user.id, '_fragment':'message-answer-block'}) }}"
                   id="launchMP{{ user.isPro?"pro":"particulier" }}{{ user.id }}"
                   class="button add icon-message {#small-12 medium-shrink#}">{{ 'global.button.send_message'|trans }}</a>

                {#<a href="{{ path('front_conversation_create',{'id':vehicle.seller.id, '_fragment':'message-answer-block'}) }}"
                   id="launchMP{{ vehicle.seller.isPro?"pro":"partiulier" }}{{ vehicle.seller.id }}"
                   class="button add large-m-b-1 icon-message">{{ 'global.button.send_message'|trans }}</a>#}

            </span>
        </div>
    {% endif %}
{% endblock body %}

{% block javascripts %}
    {% if addGarageForm is not null %}
        <script>
          let autocomplete;

          function initAutocomplete() {
            let autocompleteInputField = document.getElementById('google_place');
            // Create the autocomplete object, restricting the search to geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
              /** @type {!HTMLInputElement} */
              (autocompleteInputField),
              {
                types: ['establishment'],
                componentRestrictions: {country: 'fr'}
              }
            );

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
            autocompleteInputField.addEventListener('keypress', (e) => {
              if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                return false;
              }
            });
          }

          function fillInAddress() {
            // Get the place details from the autocomplete object.
            let place = autocomplete.getPlace();

              {# Google Place Id #}
            if (place.hasOwnProperty('place_id')) {
              document.getElementById('{{ addGarageForm.googlePlaceId.vars.id }}').value = place.place_id;
            }
            if (place.hasOwnProperty('rating')) {
              document.getElementById('{{ addGarageForm.googleRating.vars.id }}').value = place.rating;
            }

              {# Address #}
            if (place.hasOwnProperty('address_components')) {
              let address = '';
              for (let i = 0; i < place.address_components.length; i++) {
                switch (place.address_components[i].types[0]) {
                  case 'street_number':
                    address = place.address_components[i]['short_name'] + address;
                    break;
                  case 'route':
                    address = address + ' ' + place.address_components[i]['short_name'];
                    break;
                  case 'postal_code':
                    document.getElementById('{{ addGarageForm.postalCode.vars.id }}').value = place.address_components[i]['short_name'];
                    break;
                  case 'locality':
                    document.getElementById('{{ addGarageForm.cityName.vars.id }}').value = (place.address_components[i]['short_name']).toUpperCase();
                    break;
                }
              }
              if (address !== '') {
                document.getElementById('{{ addGarageForm.address.vars.id }}').value = address;
              }
            }

              {# Latitude/Longitude#}
            if (place.hasOwnProperty('geometry')) {
              document.getElementById('{{ addGarageForm.latitude.vars.id }}').value = place.geometry.location.lat();
              document.getElementById('{{ addGarageForm.longitude.vars.id }}').value = place.geometry.location.lng();
            }
              {# Name #}
            if (place.hasOwnProperty('name')) {
              document.getElementById('{{ addGarageForm.name.vars.id }}').value = place.name;
            }
              {# Phone #}
            if (place.hasOwnProperty('formatted_phone_number')) {
              document.getElementById('{{ addGarageForm.phone.vars.id }}').value = place.formatted_phone_number.replace(/ /g, '');
            }

              {# Opening hours #}
            if (place.hasOwnProperty('opening_hours') && place.opening_hours.hasOwnProperty('weekday_text')) {
              let openingHours = '';
              for (let i = 0; i < place.opening_hours.weekday_text.length; i++) {
                openingHours += place.opening_hours.weekday_text[i] + '\n';
              }
              document.getElementById('{{ addGarageForm.openingHours.vars.id }}').value = openingHours;
            }
          }
        </script>
        <script type="text/javascript"
                src="https://maps.googleapis.com/maps/api/js?key={{ google_api_client_key }}&libraries=places&callback=initAutocomplete&language={{ app.request.locale|slice(0, 2) }}"
                defer async></script>
    {% endif %}
{% endblock javascripts %}

