{% extends 'front/Layout/layout.html.twig' %}

{% block mainClass %}no-padding-top{% endblock %}

{% set isUserProPageProfil = (user.isPro) %}
{% set isUserPersonalPageProfil = (user.isPersonal) %}

{% block title %}
    {% if userIsMe %}
        {{ 'user.title.pro.mine'|trans }}
    {% else %}
        {{ 'user.title.pro.other'|trans({'%username%':user.fullName}) }}
    {% endif %}
{% endblock %}

{% set breadcrumbs = [
    {
        'name': block('title'),
        'href': app.request.requestUri
    }
] %}

{% block body %}
    {% include 'front/Layout/includes/breadcrumb.html.twig' %}
    {% include 'front/User/includes/profil_header.html.twig' %}

    <section class="row full-width">
        <div class="profil-body column block-grid small-12">
            <div class="small-12 medium-7 large-5 input-margin">
                {% block presentation %}
                    <h2>{{ 'user.presentation.title.pro'|trans }}</h2>
                    {% if user.description %}
                        <p>{{ user.description|nl2br }}</p>
                    {% elseif userIsMe %}
                        <p>{{ 'user.presentation.empty'|trans }}</p>
                    {% endif %}
                    {% if userIsMe %}
                        <p><a href="{{ path('front_edit_user_info') }}" class="text-underline">{{ 'user.presentation.edit'|trans }}</a></p>
                    {% endif %}

                    <h2>{{ "user.affinity.section.title"|trans }}</h2>
                    <p>{{ 'user.affinity.section.explanation'|trans }}
                        <a href="{{ path('front_affinity_pro_form') }}" class="text-underline">
                            {{ 'user.affinity.section.action'|trans }}</a> {{ 'user.affinity.section.more_explanation'|trans }}
                    </p>
                    <p>{{ user.affinityAnswer is not null ? 'Affinity Form answered : ' }}
                    {% if user.affinityAnswer %}
                        {{ dump(user.affinityAnswer.contentAsArray.form_response.answers) }}</p>
                    {% endif %}
                    {#<p>{{ dump(user.affinityDegrees) }}</p>#}
                {% endblock %}
            </div>
            <div class="separator-for-small small-12 medium-4 medium-offset-1 large-6">
                {% block other_informations %}
                    <h2>{{ 'user.garage.seller_for'|trans }}</h2>
                    {% if user.hasGarage or userIsMe %}
                        {% include 'front/User/includes/brand_list.html.twig' %}
                    {% else %}
                        <p>{{ 'user.garage.empty'|trans }}</p>
                    {% endif %}

                    {% if addGarageForm is not null %}
                        <h3>{{ 'user.garage.join'|trans }}</h3>
                        {{ form_start(addGarageForm, {'attr' : { 'data-abide' : '', 'novalidate': 'novalidate'} }) }}

                        {% include 'front/Layout/includes/forms/input.html.twig' with {
                            label: 'garage.form.field.googleSearch.label'|trans,
                            label_class: 'hide',
                            name: 'google_place',
                            placeholder: 'garage.form.field.googleSearch.placeholder'|trans,
                            attributes:{
                                'data-google_api_client_key' : google_api_client_key,
                                'data-locale' : app.request.locale|slice(0, 2)
                            }
                        } %}
                        {{ form_widget(addGarageForm.googlePlaceId) }}
                        {{ form_widget(addGarageForm.googleRating) }}
                        {{ form_widget(addGarageForm.latitude) }}
                        {{ form_widget(addGarageForm.longitude) }}
                        {{ form_widget(addGarageForm.name) }}
                        {{ form_widget(addGarageForm.openingHours) }}
                        {{ form_widget(addGarageForm.address) }}
                        {{ form_widget(addGarageForm.postalCode) }}
                        {{ form_widget(addGarageForm.cityName) }}
                        {{ form_widget(addGarageForm.phone) }}

                        <button type="submit" class="button full-width input-margin">{{ 'global.button.validate'|trans }}</button>
                        {{ form_end(addGarageForm) }}
                    {% endif %}
                    {% if userIsMe %}
                        <a href="{{ path('front_garage_create') }}" class="text-underline">{{ 'user.garage.add'|trans }}</a>
                    {% endif %}
                {% endblock %}
            </div>
            {% block vehicle %}{% endblock %}
        </div>
    </section>
{% endblock body %}

{% block javascripts %}
    {% if addGarageForm is not null %}
        <script>
          let autocomplete;

          function initAutocomplete() {
            let autocompleteInputField = document.getElementById('google_place');
            // Create the autocomplete object, restricting the search to geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
              /** @type {!HTMLInputElement} */
              (autocompleteInputField),
              {
                types: ['establishment'],
                componentRestrictions: {country: 'fr'}
              }
            );

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
            $(autocompleteInputField).on('keypress', (e) => {
              if (e.keyCode === 13) {
                return false;
              }
            })
          }

          function fillInAddress() {
            // Get the place details from the autocomplete object.
            let place = autocomplete.getPlace();

              {# Google Place Id #}
            document.getElementById('{{ addGarageForm.googlePlaceId.vars.id }}').value = place.place_id;
            if (place.hasOwnProperty('rating')) {
              document.getElementById('{{ addGarageForm.googleRating.vars.id }}').value = place.rating;
            }

              {# Address #}
            let address = '', codePostal = '', cityName = '';
            for (let i = 0; i < place.address_components.length; i++) {
              switch (place.address_components[i].types[0]) {
                case 'street_number':
                  address = place.address_components[i]['short_name'] + address;
                  break;
                case 'route':
                  address = address + ' ' + place.address_components[i]['short_name'];
                  break;
                case 'postal_code':
                  codePostal = place.address_components[i]['short_name'];
                  break;
                case 'locality':
                  cityName = (place.address_components[i]['short_name']).toUpperCase();
                  break;
              }
            }
            document.getElementById('{{ addGarageForm.cityName.vars.id }}').value = cityName;
            document.getElementById('{{ addGarageForm.postalCode.vars.id }}').value = codePostal;
            document.getElementById('{{ addGarageForm.address.vars.id }}').value = address;

              {# Latitude/Longitude#}
            if (place.hasOwnProperty('geometry')) {
              document.getElementById('{{ addGarageForm.latitude.vars.id }}').value = place.geometry.location.lat();
              document.getElementById('{{ addGarageForm.longitude.vars.id }}').value = place.geometry.location.lng();
            }
              {# Name #}
            let nameField = document.getElementById('{{ addGarageForm.name.vars.id }}');
            if (place.hasOwnProperty('name')) {
              nameField.value = place.name;
            }
              {# Phone #}
            let phoneField = document.getElementById('{{ addGarageForm.phone.vars.id }}');
            if (place.hasOwnProperty('formatted_phone_number')) {
              phoneField.value = place.formatted_phone_number.replace(/ /g, '');
            }

              {# Opening hours #}
            let openingHOursField = document.getElementById('{{ addGarageForm.openingHours.vars.id }}');
            if (place.hasOwnProperty('opening_hours') && place.opening_hours.hasOwnProperty('weekday_text')) {
              let openingHours = '';
              for (let i = 0; i < place.opening_hours.weekday_text.length; i++) {
                openingHours += place.opening_hours.weekday_text[i] + '\n';
              }
              openingHOursField.value = openingHours;
            }
          }
        </script>
        <script type="text/javascript"
                src="https://maps.googleapis.com/maps/api/js?key={{ google_api_client_key }}&libraries=places&callback=initAutocomplete&language={{ app.request.locale|slice(0, 2) }}"
                defer async></script>
    {% endif %}
{% endblock javascripts %}

