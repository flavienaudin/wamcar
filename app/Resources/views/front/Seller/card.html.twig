{% extends 'front/Layout/layout.html.twig' %}

{% block mainClass %}no-padding-top profil-seller-main{% endblock %}

{% set isUserProPageProfil = (user.isPro) %}
{% set isUserPersonalPageProfil = (user.isPersonal) %}

{% block title %}
    {% if userIsMe %}
        {{ 'user.title.pro.mine'|trans }}
    {% else %}
        {{ 'user.title.pro.other'|trans({'%username%':user.fullName}) }}
    {% endif %}
{% endblock %}

{% block meta_description %}{{ user.presentationTitle is not null ? user.presentationTitle : 'user.presentation.title.pro'|trans }}{% endblock %}

{% set seo_img_url = user.avatar|avatar('user_thumbnail', user.fullName) %}

{% set breadcrumbs = [
    {
        'name': block('title'),
        'href': app.request.requestUri
    }
] %}

{% block body %}
    {% include 'front/User/includes/seller_profil_header.html.twig' %}

    <section class="row profil-body">
        {# Left column #}
        <div class="js-profil-seller-left-column profil-seller-left-column column small-12 large-8">
            {# Registration Blue Block #}
            {% if not isLogged %}
                <div class="profil-section block-grid align-middle block-dark-blue block-light-shadow">
                    <div class="column small-12 large-8 text-justify">
                        {{ 'user.registration.block_insert'|trans({'%username%':user.firstname|title})|raw }}</div>
                    <div class="column small-12 medium-6 medium-offset-3 large-4 large-offset-0">
                        <a href="{{ path('register', {'type': constant("Wamcar\\User\\PersonalUser::TYPE")}) }}"
                           class="button expand-height square dark-blue">
                            {{ 'global.button.register'|trans }}</a>
                    </div>
                </div>
            {% endif %}
            {# END Registration Blue Block #}

            {# User Description Block #}
            {% if user.description is not empty or presentationForm is not null %}
                <div class="profil-section block-light-shadow">
                    {% if presentationForm is not null %}
                        {{ form_start(presentationForm, {
                            'attr': {'class': 'form-compact', 'data-abide' : '','novalidate': 'novalidate'}
                        }) }}
                    {% endif %}
                    <h2>
                        {% if presentationForm is not null %}
                            <span class="profil-section-action icon-pen"
                                  data-toggle="jsPresentationTitleInput jsDescriptionInput jsDescriptionText jsSubmitInput">
                            </span>
                        {% endif %}
                        {{ user.presentationTitle is not null ? user.presentationTitle : 'user.presentation.title.pro'|trans }}
                    </h2>

                    {% if presentationForm is not null %}
                        <div id="jsPresentationTitleInput" class="is-hidden" data-toggler="is-hidden">
                            {{ form_widget(presentationForm.presentationTitle, {
                                'label': 'user.profile.edit.form.presentationTitle.label'|trans,
                                'required': false,
                                'required_class': 'show-for-sr',
                                'attr' : {
                                    'placeholder': 'user.profile.edit.form.presentationTitle.placeholder'|trans,
                                    'maxlength': 50
                                }
                            }) }}
                        </div>
                    {% endif %}

                    <div id="jsDescriptionText" data-toggler="is-hidden" class="text-justify">
                        {% if user.description %}
                            {{ user.description|nl2br }}
                        {% elseif userIsMe %}
                            {{ 'user.presentation.empty'|trans }}
                        {% endif %}
                    </div>

                    {% if presentationForm is not null %}
                        <div id="jsDescriptionInput" class="is-hidden" data-toggler="is-hidden">
                            {{ form_widget(presentationForm.description, {
                                'label': 'user.profile.edit.form.presentation.label'|trans,
                                'required': false,
                                'required_class': 'show-for-sr'
                            }) }}
                        </div>
                        <div id="jsSubmitInput" class="is-flex align-right is-hidden" data-toggler="is-hidden">
                            <input type="submit" class="button" value="{{ 'global.button.validate'|trans }}">
                        </div>
                    {% endif %}

                    {% if presentationForm is not null %}{{ form_end(presentationForm) }}{% endif %}
                </div>
            {% endif %}
            {# END User Description Block #}

            {# Applointment Block #}
            {% if user.appointmentText is not empty %}
                <div class="profil-section block-grid align-middle block-dark-blue block-light-shadow">
                    <div class="column small-12 large-8 text-justify">{{ user.appointmentText }}</div>
                    <div class="column small-12 medium-6 medium-offset-3 large-4 large-offset-0">
                        <a href="{{ path('front_conversation_create', {'id': user.id, (constant("AppBundle\\Controller\\Front\\ProContext\\ConversationController::QUERYPARAM_APPOINTMENT")):true, '_fragment':'message-answer-block'}) }}"
                           class="button expand-height square dark-blue" data-wtaction="LM RDV"
                           data-wtfrom="{{ app.user|wtFromDataAttrValue }}" data-wtto="{{ user|wtToDataAttrValue }}">
                            {{ 'user.appointment.call_to_action'|trans({'%username%':user.firstName|title}) }}</a>
                    </div>
                </div>
            {% endif %}
            {# END Applointment Block #}

            {# Affinity Blocks (according to (un)logged user) #}
            {% set lwaWTattr = 'data-wtaction="LWA" data-wtfrom="'~ app.user|wtFromDataAttrValue ~'" data-wtcontext="'~user|wtToDataAttrValue~'"' %}
            {% if userIsMe %}
                <div class="profil-section block-light-shadow">
                    <h2>{{ "user.affinity.section.title"|trans }}</h2>
                    {% if user.affinityAnswer is null %}
                        {{ 'user.affinity.section.explanation.pro'|trans({
                            '%affinity_form_url%': path('front_affinity_pro_form'),
                            '%datawtattr%' : lwaWTattr|raw
                        })|raw }}
                    {% else %}
                        <p>{{ 'user.affinity.section.edit.pro'|trans({
                                '%affinity_form_url%': path('front_affinity_pro_form'),
                                '%datawtattr%' : lwaWTattr|raw
                            })|raw }}</p>
                    {% endif %}
                </div>
            {% elseif user.affinityAnswer is not null and (app.user is null or app.user.isPersonal) %}
                {% set userAffinity = user.getAffinityDegreesWith(app.user) %}
                {% if userAffinity is not null %}
                    <div class="profil-section block-light-shadow">
                        <h2>{{ "user.affinity.section.our_affinities"|trans }}
                            {{ include('front/Affinity/includes/affinity_degreee_element.html.twig', {enable_dropdown : false}) }}</h2>
                        <canvas class="js-radar-chart" data-dataset="{{ userAffinity is not null ? userAffinity.radarChartData|json_encode }}"></canvas>
                    </div>
                {% else %}
                    <div class="profil-section block-grid align-middle block-dark-blue block-light-shadow hide-for-small-only">
                        <div class="column small-12 large-8 text-justify">
                            <h2>{{ "user.affinity.section.our_affinities"|trans }}
                                {{ include('front/Affinity/includes/affinity_degreee_element.html.twig', {enable_dropdown : false}) }}</h2>
                            {{ isLogged ? 'user.affinity.degree.explanation.personal.logged'|trans({'%username%':user.firstname|title})
                            : 'user.affinity.degree.explanation.personal.unlogged'|trans({'%username%':user.firstname|title}) }}
                        </div>
                        <div class="column small-12 medium-6 medium-offset-3 large-4 large-offset-0">
                            <a href="{{ path('front_affinity_personal_form') }}"
                               class="button expand-height square dark-blue" {{ lwaWTattr }}>
                                {{ isLogged ? 'user.affinity.degree.calltoaction.fill_form'|trans:'global.button.register'|trans }}</a>
                        </div>
                    </div>
                {% endif %}
            {% endif %}
            {# END Affinity Blocks #}

            {# Presentation Video Block #}
            {% if user.youtubeVideoUrl is not empty or videoPresentationForm is not null %}
                <div class="profil-section block-light-shadow">
                    <h2>
                        {% if videoPresentationForm is not null %}
                            <span class="profil-section-action icon-pen"
                                  data-toggle="jsVideoPresentationPreview jsVideoPresentationForm">
                            </span>
                        {% endif %}
                        {% if user.videoTitle is not empty %}
                            {{ user.videoTitle }}
                        {% else %}
                            {{ 'user.video.title'|trans }}
                        {% endif %}
                    </h2>
                    <div id="jsVideoPresentationPreview"
                         data-toggler="is-hidden" {{ videoPresentationForm is not null and not videoPresentationForm.vars.valid ? 'class="is-hidden"' }}>
                        {% set userYoutubeVideoId =  user.youtubeVideoId %}
                        {% if userYoutubeVideoId is not empty %}
                            <div class="youtube-player" data-id="{{ userYoutubeVideoId }}"></div>
                        {% elseif videoPresentationForm is not null %}
                            <div>
                                {% if user.videoText is empty %}
                                    <i>{{ 'user.video.placeholder.all_empty'|trans }}</i>
                                {% else %}
                                    <div class="callout warning small">
                                        <i class="icon-warning2">{{ 'user.video.placeholder.with_text'|trans }}</i>
                                    </div>
                                {% endif %}
                            </div>
                        {% endif %}

                        {% if user.videoText is not empty %}
                            <div class="profil-video margin-top-2">
                                {{ user.videoText|raw }}
                            </div>
                        {% endif %}
                    </div>
                    {% if videoPresentationForm is not null %}
                        <div id="jsVideoPresentationForm" {{ videoPresentationForm.vars.valid ? 'class="is-hidden"' }} data-toggler="is-hidden">
                            {{ form_start(videoPresentationForm, {
                                'attr':{'data-abide': 'data-abide', 'novalidate': 'novalidate'}
                            }) }}

                            {{ form_widget(videoPresentationForm.videoTitle, {
                                'label' : 'user.profile.edit.form.video.title.label'|trans,
                                'required' : false,
                                'required_class': 'show-for-sr',
                                'attr': {'placeholder': 'user.video.title'|trans}
                            }) }}

                            {{ form_widget(videoPresentationForm.youtubeVideoUrl, {
                                'label' : 'user.profile.edit.form.video.youtubeVideoUrl.label'|trans,
                                'error_message': 'user.profile.edit.form.video.youtubeVideoUrl.invalidMEssage'|trans,
                                'required': false,
                                'required_class': 'show-for-sr',
                                'attr': {
                                    'placeholder': 'user.profile.edit.form.video.youtubeVideoUrl.placeholder'|trans,
                                }
                            }) }}
                            {{ form_errors(videoPresentationForm.youtubeVideoUrl) }}

                            {{ form_row(videoPresentationForm.videoText, {
                                'label': 'user.profile.edit.form.video.videoText.label'|trans,
                                'required': false,
                                'required_class': 'show-for-sr'
                            }) }}

                            <div class="is-flex align-right">
                                <input type="submit" class="button" value="{{ 'global.button.validate'|trans }}">
                            </div>
                            {{ form_end(videoPresentationForm) }}
                        </div>
                    {% endif %}
                </div>
            {% endif %}
            {# END Presentation Video Block #}

            {# User Specialities & Services Block #}
            {% set userSpecialities = user.proUserSpecialities %}
            {% set proServices = user.proUserServices(true, true) %}
            {% set userHobbies = user.hobbies %}
            {% if userIsMe or userSpecialities |length > 0 or proServices|length > 0 or userHobbies|length > 0 %}
                <div class="profil-section seller-services block-light-shadow">
                    {% if userIsMe or userSpecialities |length > 0 %}
                        <div>
                            <h2>
                                {% if userIsMe %}
                                    <a href="{{ path('front_edit_prouser_specialities') }}" class="profil-section-action icon-pen"></a>
                                {% endif %}
                                {{ 'user.profile.proservices.specialities.title'|trans }}</h2>
                            <div class="tag-container">
                                {% for proUserProSpeciality in userSpecialities %}
                                    <a href="{{ path('front_directory_by_service_view', {'speciality': proUserProSpeciality.proService.slug}) }}"
                                       class="tag">{{ proUserProSpeciality.proService.name }}</a>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if userIsMe or proServices|length > 0 %}
                        <div>
                            <h2>
                                {% if userIsMe %}
                                    <a href="{{ path('front_edit_prouser_proservices') }}" class="profil-section-action icon-pen"></a>
                                {% endif %}
                                {{ 'user.profile.proservices.services.title'|trans }}</h2>
                            <div class="tag-container">
                                {% for proUserServices in proServices %}
                                    <a href="{{ path('front_directory_by_service_view', {'speciality': proUserServices.slug}) }}"
                                       class="tag">{{ proUserServices.name }}</a>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}

                    {% if userHobbies|length > 0 %}
                        <div>
                            <h2>{{ 'user.profile.hobbies.title'|trans }}</h2>
                            <div class="hobby-container">
                                {% for userHobby in userHobbies %}
                                    <span class="hobby-icon" title="{{ userHobby.name }}">
                                        <img src="{{ asset('assets/images/hobbies/'~userHobby.icon) }}" alt="{{ userHobby.name }}">
                                    </span>
                                {% endfor %}
                            </div>
                        </div>
                    {% endif %}
                </div>
            {% endif %}
            {# END User Specialities & Services Block #}

            {# Videos Inserts Blocks #}
            {% for videosInsert in videosInserts %}
                <div id="videos-encart-{{ videosInsert.id }}" class="profil-section block-light-shadow">
                    {% if videosInsert.title is not empty or editVideosInsertFormViews[videosInsert.id] is defined %}
                        <h2>
                            {% if editVideosInsertFormViews[videosInsert.id] is defined %}
                                <span class="profil-section-action icon-pen"
                                      data-toggle="jsEditVideoInsert-{{ videosInsert.id }} jsVideoInsertVideos-{{ videosInsert.id }}">
                                </span>
                            {% endif %}
                            {{ videosInsert.title }}
                        </h2>
                    {% endif %}

                    {{ include('front/Seller/includes/videosinsert.html.twig', {
                        'mainClass': editVideosInsertFormViews[videosInsert.id] is defined and not editVideosInsertFormViews[videosInsert.id].vars.valid ? 'is-hidden' : ''
                    }) }}

                    {% if editVideosInsertFormViews[videosInsert.id] is defined %}
                        <div id="jsEditVideoInsert-{{ videosInsert.id }}" data-toggler="is-hidden"
                                {{ editVideosInsertFormViews[videosInsert.id].vars.valid ? 'class="is-hidden"' }}>

                            {% set formAttr = (not editVideosInsertFormViews[videosInsert.id].vars.valid?{
                                'id' : editVideosInsertFormViews[videosInsert.id].vars.id,
                                'data-scroll-to-now':editVideosInsertFormViews[videosInsert.id].vars.id}
                                :{}) %}
                            {{ form_start(editVideosInsertFormViews[videosInsert.id], {
                                'attr': formAttr|merge({'data-abide' : '','novalidate': 'novalidate'})
                            }) }}

                            {{ form_widget(editVideosInsertFormViews[videosInsert.id].title, {
                                'label' : 'user.profile.edit.form.video_insert.title.label'|trans,
                                'required' : false,
                                'required_class': 'show-for-sr',
                                'attr': {'placeholder': 'user.profile.edit.form.video_insert.title.placeholder'|trans}
                            }) }}

                            {% if editVideosInsertFormViews[videosInsert.id].playlistId is defined %}
                                {{ form_widget(editVideosInsertFormViews[videosInsert.id].playlistId, {
                                    'label' : 'user.profile.edit.form.video_insert.youtube_playlist_id.label'|trans,
                                    'error_message': 'user.profile.edit.form.video_insert.youtube_playlist_id.invalidMEssage'|trans,
                                    'required':  true,
                                    'attr': {
                                        'placeholder': 'user.profile.edit.form.video_insert.youtube_playlist_id.placeholder'|trans,
                                    }
                                }) }}
                                {{ form_errors(editVideosInsertFormViews[videosInsert.id].playlistId) }}
                            {% endif %}

                            <div class="is-flex align-right">
                                <a href="{{ path('front_delete_user_videos_insert', {'id': videosInsert.id}) }}"
                                   class="js-confirm-box button white margin-right-1"
                                   data-id="videosInsert-deletion-{{ videosInsert.id }}"
                                   data-title="Attention!"
                                   data-message="Confirmez-vous la suppression de cet encart vidéo ?">
                                    {{ 'global.button.delete'|trans }}</a>
                                <input type="submit" class="button" value="{{ 'global.button.validate'|trans }}">
                            </div>

                            {{ form_end(editVideosInsertFormViews[videosInsert.id]) }}
                        </div>
                    {% endif %}
                </div>
            {% endfor %}
            {# END Videos Inserts Blocks #}

            {# Add Videos Inserts Block #}
            {% if addVideosInsertForm is not null %}
            <div class="profil-section block-light-shadow">
                <div class="icon-plus" data-toggle="addVideosInsertForm">{{ "user.profile.edit.form.video_insert.add.youtube_playlist"|trans }}</div>
                <div id="addVideosInsertForm" data-toggler="is-hidden" {{ addVideosInsertForm.vars.valid ? 'class="is-hidden"' }}>
                    {% set formAttr = (not addVideosInsertForm.vars.valid?{
                        'id' : addVideosInsertForm.vars.id,
                        'data-scroll-to-now':addVideosInsertForm.vars.id}
                        :{}) %}
                    {{ form_start(addVideosInsertForm, {
                        'attr':formAttr|merge({'data-abide': 'data-abide', 'novalidate': 'novalidate'})
                    }) }}

                    {{ form_widget(addVideosInsertForm.title, {
                        'label' : 'user.profile.edit.form.video_insert.title.label'|trans,
                        'required' : false,
                        'required_class': 'show-for-sr',
                        'attr': {'placeholder': 'user.profile.edit.form.video_insert.title.placeholder'|trans}
                    }) }}
                    {% if addVideosInsertForm.playlistId %}
                        {{ form_widget(addVideosInsertForm.playlistId, {
                            'label' : 'user.profile.edit.form.video_insert.youtube_playlist_id.label'|trans,
                            'required' : false,
                            'required_class': 'show-for-sr',
                            'attr': {'placeholder': 'user.profile.edit.form.video_insert.youtube_playlist_id.placeholder'|trans}
                        }) }}
                        {{ form_errors(addVideosInsertForm.playlistId) }}
                    {% endif %}

                    <div class="is-flex align-right">
                        <input type="submit" class="button" value="{{ 'global.button.validate'|trans }}">
                    </div>
                    {{ form_end(addVideosInsertForm) }}
                </div>
            </div>
            {% endif %}
            {# END Add Videos Inserts Block #}

            {# User Vehicles Block #}
            {% if vehicles.totalHits > 0 %}
                <div class="profil-seller-vehicles">
                    <h2>{{ 'user.vehicles.title'|trans }}</h2>
                    {% include 'front/Garages/Detail/includes/tabs_vehicles.html.twig' with {
                        'pagination_route': 'front_view_pro_user_info',
                        'pagination_route_params': {'slug':user.slug},
                        'displayNbOfResult' : false,
                        'isEditableByCurrentUser' : false,
                        'columnsSizes' : 'small-up-2 medium-up-3'
                    } %}{# isEditableByCurrentUser is false to hide link "Add a vehicle" because no garage is selected in case of multi-garage #}
                </div>
            {% endif %}
            {# END User Vehicles Block #}

            {# Delete Account Block #}
            {% if userIsMe %}
                <div class="profil-section block-light-shadow">
                    <h2>{{ 'user.profile.delete.title'|trans }}</h2>
                    <p>{{ 'user.profile.delete.link.information'|trans }}
                        <a href="{{ path('front_user_delete') }}"
                           class="text-underline">{{ 'global.button.delete'|trans }}</a>
                    </p>
                </div>
            {% endif %}
            {# END Delete Account Block #}
        </div>
        {# END Left column #}

        {# Right column #}
        <div class="js-profil-seller-right-column profil-seller-right-column column small-12 large-4">
            {# User Garages Management Block #}
            {% if userIsMe %}
                <div class="profil-section garages-card block-light-shadow">
                    {% include 'front/User/includes/brand_list.html.twig' %}
                </div>
            {% endif %}
            {# END User Garages Management Block #}
        </div>
        {# END Right column #}
    </section>

    {% if contactForm is not null %}
        {{ include('front/Seller/includes/prouser_contact_form.html.twig', {
            'titleClass':'h2 text-center large-text-left',
            'formClass':'form-compact',
            'responsiveDomDestination':'.js-profil-seller-right-column',
            'responsiveDomAppendTo':false,
            'responsiveDomBreakpoint': 'large'
        }) }}
    {% endif %}
{% endblock body %}

{% block javascripts %}
    {% if addGarageForm is not null %}
        <script>
          let autocomplete;

          function initAutocomplete() {
            let autocompleteInputField = document.getElementById('google_place');
            // Create the autocomplete object, restricting the search to geographical location types.
            autocomplete = new google.maps.places.Autocomplete(
              /** @type {!HTMLInputElement} */
              (autocompleteInputField),
              {
                types: ['establishment'],
                componentRestrictions: {country: 'fr'}
              }
            );

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
            autocompleteInputField.addEventListener('keypress', (e) => {
              if (e.key === 'Enter' || e.keyCode === 13) {
                e.preventDefault();
                return false;
              }
            });
          }

          function fillInAddress() {
            // Get the place details from the autocomplete object.
            let place = autocomplete.getPlace();

              {# Google Place Id #}
            if (place.hasOwnProperty('place_id')) {
              document.getElementById('{{ addGarageForm.googlePlaceId.vars.id }}').value = place.place_id;
            }
            if (place.hasOwnProperty('rating')) {
              document.getElementById('{{ addGarageForm.googleRating.vars.id }}').value = place.rating;
            }

              {# Address #}
            if (place.hasOwnProperty('address_components')) {
              let address = '';
              for (let i = 0; i < place.address_components.length; i++) {
                switch (place.address_components[i].types[0]) {
                  case 'street_number':
                    address = place.address_components[i]['short_name'] + address;
                    break;
                  case 'route':
                    address = address + ' ' + place.address_components[i]['short_name'];
                    break;
                  case 'postal_code':
                    document.getElementById('{{ addGarageForm.postalCode.vars.id }}').value = place.address_components[i]['short_name'];
                    break;
                  case 'locality':
                    document.getElementById('{{ addGarageForm.cityName.vars.id }}').value = (place.address_components[i]['short_name']).toUpperCase();
                    break;
                }
              }
              if (address !== '') {
                document.getElementById('{{ addGarageForm.address.vars.id }}').value = address;
              }
            }

              {# Latitude/Longitude#}
            if (place.hasOwnProperty('geometry')) {
              document.getElementById('{{ addGarageForm.latitude.vars.id }}').value = place.geometry.location.lat();
              document.getElementById('{{ addGarageForm.longitude.vars.id }}').value = place.geometry.location.lng();
            }
              {# Name #}
            if (place.hasOwnProperty('name')) {
              document.getElementById('{{ addGarageForm.name.vars.id }}').value = place.name;
            }
              {# Phone #}
            if (place.hasOwnProperty('formatted_phone_number')) {
              document.getElementById('{{ addGarageForm.phone.vars.id }}').value = place.formatted_phone_number.replace(/ /g, '');
            }

              {# Opening hours #}
            if (place.hasOwnProperty('opening_hours') && place.opening_hours.hasOwnProperty('weekday_text')) {
              let openingHours = '';
              for (let i = 0; i < place.opening_hours.weekday_text.length; i++) {
                openingHours += place.opening_hours.weekday_text[i] + '\n';
              }
              document.getElementById('{{ addGarageForm.openingHours.vars.id }}').value = openingHours;
            }
          }
        </script>
        <script type="text/javascript"
                src="https://maps.googleapis.com/maps/api/js?key={{ google_api_client_key }}&libraries=places&callback=initAutocomplete&language={{ app.request.locale|slice(0, 2) }}"
                defer async></script>
    {% endif %}
{% endblock javascripts %}

